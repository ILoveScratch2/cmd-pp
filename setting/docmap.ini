vector
std::vector<typename> 动态数组 动态分配内存 重写了比较运算符及赋值运算符 便利初始化
v[pos]:   下标pos的引用  v.front():返回首元素引用 v.back():返回尾元素引用  size():返回容器长度
clear():  清除所有元素    insert():插入元素        erase():删除元素
resize(n):改变长度为n               push_back()/pop_back():在末尾操作元素

array
std::array<typename,len> 内存连续的、固定长度的数组数据结构。本质是对原生数组的直接封装
empty    检查容器是否为空        fill     以指定值填充容器
size     返回容纳的元素数        operator  按照字典序比较array中的值
max_size 返回可容纳的最大元素数  swap      交换内容

deque
std::deque<typename>  双端队列数据结构。能够提供线性复杂度的插入和删除，以及常数复杂度的随机访问。
front():返回首元素的引用。    迭代器:与vector一致。
back() :返回末尾元素的引用。  长度  :与vector一致，但是没有reserve()和capacity()函数
push_front()/push_back()插入元素，常数复杂度。  pop_front()/pop_back()删除元素，常数复杂度。

list
std::list 是STL提供的双向链表数据结构。能够提供线性复杂度的随机访问，以及常数复杂度的插入和删除。
由于 list 的实现是链表，因此它不提供随机访问的接口
参见 https://oi-wiki.org/lang/csl/sequence-container/#list

forward_list
std::forward_list 是STL提供的单向链表数据结构，相比于std::list减小了空间开销。
forward_list的使用方法与list几乎一致，但是迭代器只有单向的
参见 https://oi-wiki.org/lang/csl/sequence-container/#forward_listc11

set
std::set 是关联容器，含有键值类型对象的已排序集，搜索、移除和插入拥有对数复杂度，不会出现值相同的元素
insert(x) 插入     clear() 清空set。                   find(x)存在x元素时会返回迭代器
erase(x) 删除      count(x) 返回set内键为x的元素数量。 empty() 返回容器是否为空。
erase(pos) 删除迭代器为 pos 的元素                     size() 返回容器内元素个数。

map
std::map 是有序键值对容器，它的元素的键是唯一的。搜索、移除和插入操作拥有对数复杂度。实现为红黑树。
map中不会存在键相同的元素，multimap中允许多个元素拥有同一键。使用方法与map的使用方法基本相同。
map 重载了 operator[]，可以用任意定义了 operator < 的类型作为下标，map<Key, T> yourMap;
参见 https://oi-wiki.org/lang/csl/associative-container/#map

unordered_set
std::unordered_set
自C++11标准起，四种基于哈希实现的无序关联式容器正式纳入了C++的标准模板库中。
这几种无序关联式容器则采用哈希方式存储元素，内部元素不以任何特定顺序进行排序。
采用哈希存储的特点使得无序关联式容器在平均情况下大多数操作都能在常数时间复杂度内完成

unordered_multiset
std::unordered_multiset
自C++11标准起，四种基于哈希实现的无序关联式容器正式纳入了C++的标准模板库中。
这几种无序关联式容器则采用哈希方式存储元素，内部元素不以任何特定顺序进行排序。
采用哈希存储的特点使得无序关联式容器在平均情况下大多数操作都能在常数时间复杂度内完成

unordered_map
std::unordered_map
自C++11标准起，四种基于哈希实现的无序关联式容器正式纳入了C++的标准模板库中。
这几种无序关联式容器则采用哈希方式存储元素，内部元素不以任何特定顺序进行排序。
采用哈希存储的特点使得无序关联式容器在平均情况下大多数操作都能在常数时间复杂度内完成

unordered_multimap
std::unordered_multimap
自C++11标准起，四种基于哈希实现的无序关联式容器正式纳入了C++的标准模板库中。
这几种无序关联式容器则采用哈希方式存储元素，内部元素不以任何特定顺序进行排序。
采用哈希存储的特点使得无序关联式容器在平均情况下大多数操作都能在常数时间复杂度内完成

stack
std::stack<TypeName>  后进先出,仅支持查询或删除最后一个加入的元素,不支持随机访问
push(x) 向栈中插入元素 x     pop() 删除栈顶元素        top() 访问栈顶元素
size() 查询容器中的元素数量  empty() 询问容器是否为空

queue
std::queue<TypeName> 队列,一种先进先出的容器适配器，仅支持查询或删除第一个加入的元素，不支持随机访问
front() 访问队首元素（如果队列为空，此处会出错）
push(x) 向队列中插入元素x     pop() 删除队首元素
size() 查询容器中的元素数量  empty() 询问容器是否为空

priority_queue
std::priority_queue<TypeName> 一种堆，一般为二叉堆。
top() 访问堆顶元素（此时优先队列不能为空） push(x) 插入元素，并对底层容器排序
empty() 询问容器是否为空                   pop() 删除堆顶元素（此时优先队列不能为空）
size() 查询容器中的元素数量

int
int
32位有符号整数

short
short
16位有符号整数

char
char
8位有符号整数 字符型

long
long
32位有符号整数
long long : 64位有符号整数

unsigned
unsigned
无符号标志

